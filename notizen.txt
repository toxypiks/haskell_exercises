2025-05-30 Übung Programmierparadigmen

x = 1

x = x + 1 -- Endlosschleife weil Definitionen Ersetzungsdefinitionen sind

- binäre Funktionen als Infix definieren mit back-ticks `xor` `mod`

Es gibt Werte, Datentypen, Typklassen

         3       Int       Num
        'c'      Char      Eq

Werte sind sowas wie Objekte, Datentypen sowas wie Klassen und Typklassen sind Interfaces (OOP Vergleich)

otherwise :: Bool -- nullstellige Funktion die Bool liefert
not :: Bool -> Bool -- einstellige Funktion
&& -- zweistellige Funktion
undefined :: GHC.Stack.Types.HasCallStack => a -- nullstellige Funktion die Wert beliebigen Datentyps liefert
id :: a -> a -- bildet Wert eines beliebigen Typs auf Wert eines gleichen Typs ab
maxBound :: Bounded a => a -- gibt Wert beliebigen Typs aus der Typklasse Bounded
even :: Integral a => a -> Bool beliebiger Wert aus Typenklasse Integral wird auf einen Bool abgebildet

Typvariablen beginnen mit Kleinbuchstaben, Datentypen und Typklassen mit Großbuchstaben

Auswertungsprotokolle aufschreiben können

Endzeilen Rekursion angucken

f' 3 -> f (3-1) (1*3)
f' 2 -> f (2-1) (3*2)
f' 1 -> f (1-1) (6*1)
f' 0 -> f (0-1) (6*0)

=== 2025-06-01 Learn Haskell ===

elemAt "Hallo" 3 -> elemAt "h" (3-1)
elemAt "Hallo" 2 -> elemAt "a" (2-1)
elemAt "Hallo" 1 -> elemAt "l" (1-1)
elemAt "Hallo" 0 -> l

cabal project start: .cabal

common warnings
    ghc-options:
        -Wall
        -dynamic

2025-06-06 Übung Programmierparadigmen

fakultaet für -1 indem man Fall abfängt | n < 0 = error "negative argument!" Alternative Maybe

Tupel

Operationen == und < zulässig insofern Datentypen diese Operationen zulassen

(1, 'a') < (1, 'z') True
(1, 2) == ('a', 2) False weil unterschiedliche Typen

- außerdem muss Anzahl der Elemente der vergl. Tupel gleich sein
- fst, snd gibt erstes/zweites Paar des Tupels

Listen:

[True] != True

cons Operator nicht um hinten Element dranzuhängen also nicht [1,2]:3 sondern nur 1:[2,3]
cons Operator ist rechtsassoziativ
[1,2,3] == 1:2:3:[]

x:xs:xss Liste von Listen

warum (x:xs) nicht x:xs? weil Funktionsanwendung vorrang hätte, also ohne Klammer würde die Funktion nicht auf xs aufgewendet werden, generell Fehler (head' x) :xs Falsch!

[1,2,3] +++ [4] -> 1:([2,3] +++ 4)
[2,3] +++ [4] -> 1:(2:([3] +++ 4))
[3] +++ [4] -> 1:(2:(3:([] +++ 4)))

my_reverse' [1,2,3] -> f [1,2,3] []
                    -> f [2,3] [1]
                    -> f [3] [1,2]
                    -> f [] [3,2,1]
                    -> [3,2,1]

mit acc schneller als ohne, weil ohne O(n^2) mit O(i)


Quadratwurzel heron

wurzel :: Double -> Double -> Double
wurzel a eps

Startwert h0 = (1 + a)*0.5

Formel = hn+1 = (hn + a/hn)*0.5

a = soll gewurzelt werden

innere Funktion Startwert und Rekursion, so lange wie:
hn - hn+1 <= eps
                            h0
wurzel a eps = aux a eps ((1+a)*0.5) ((1+a)*0.5+2*eps)

aux :: Double -> Double -> Double -> Double -> Double
aux a eps h h_old| (h - h_old)*(h - h_old) <= eps*eps = h
                 | otherwise = aux a eps ((h+a/h)*0.5) h
                                           
hn+1 = formel h


|x| < |y|

0.1    0.2

-0.5   0.2

x^2  < y^2

0.25  0.04 

hn
hn+1

aux2 :: Double -> Double -> Double -> Double
aux2 a eps h | (h_new - h)*(h_new - h) <= eps*eps = h_new
             | otherwise = aux a eps h_new  
               where h_new = ((h+a/h)*0.5)

=== 2025-06-13 ===

Präfix Operatoren haben höhere Präzedenz als infix Operatoren

my_elem elem (x:xs)
        | elem == x = return True
        | otherwise my_elem elem xs

Funktion höherer Ordnung bekommen entweder eine Funktion als Parameter oder gibt eine Funktion zurück

=== 2025-06-20 ===

bei read muss Typ der Rückgabe angegeben werden read "1" :: Int zBb

6 Typklassen für eigene Datenstrukturen, ansonnsten Funktionen definieren für weitere Typklassen

data Liste = Leer | Int :+: Liste deriving (Show) mit : am Anfang -> infix Konstruktor

1:+:2:+:3:+:4:+:Leer

data Liste = Leer | a :+: Liste deriving (Show) -> für allgemeine Datentypen

Maybe -> Weiterverarbeiten von fehlenden Werten

data Maybe a = Nothing | Just a -> Nothing und Just sind Konstruktoren

fak n | n < 0 = Nothing
      | otherwise = Just (f n)
      where f 0 = 1
            f n = n * f (n-1)

=== 2025-06-27 ===

(x:y):z oder x:(y:z) -> Unterschied

Sections angucken

C:

void tausche(int werte[], int i, int j)
{
    int tmp = werte[i];
    werte[i] = werte[j];
    werte[j] = werte[tmp];        
}

int werte[] implizit call bei reference

void selection_sort(int n, int werte[])
{
    for(size_t i = 0; i < n - 1; ++i) {
        int m = i;
        for (size_t j = i + 1; j < n; ++ j) {
            if (werte[m] > werte [j]) {
           m = j;           
         }    
        }
        int tmp = werte[m];
        werte[m] = werte[i];
        werte[i] = werte[tmp];
     }
}

Haskell:

entferne _ [] = []
entferne wert (x:xs)
         | wert == x = xs
         | otherwise = x:entferne wert xs

kleinstes [] = error "leere liste"
kleinstes [x] = x
kleinstes (x:xs) = min x (kleinstes xs)

selection_sort [] = []
selection_sort xs = let m = kleinstes xs
                    in m:selection_sort (entferne m xs)

quicksort xs = let pivot = !! xs (length xs `div` 2)
                   ls =  [x | x <- xs, x < pivot]
                   ps = [x | x <- xs, x == p]
                   rs = [x | x <- xs, x > p]
                   in quicksort ls ++ ps ++ quicksort rs

nats = f 1
       where f n = n:f (n+1)

nats -> f 1
     -> 1:f (1+1) -> 1:f 2
     -> 1:2:f (2+1) -> 1:2:f 3
